# coding: utf-8

"""
BuildrecordpushApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class BuildrecordpushApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def cancel(self, build_record_id, **kwargs):
        """
        Build record push results.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancel(build_record_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int build_record_id: Build Record id (required)
        :param BuildRecordPushResultRest body: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'build_record_id' is set
        if build_record_id is None:
            raise ValueError("Missing the required parameter `build_record_id` when calling `cancel`")

        all_params = ['build_record_id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/build-record-push/{buildRecordId}/cancel'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'build_record_id' in params:
            path_params['buildRecordId'] = params['build_record_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='int',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get(self, build_record_id, **kwargs):
        """
        Get Build Record Push Result by Id..
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get(build_record_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int build_record_id: Build Record id (required)
        :return: BuildRecordPushResultRest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'build_record_id' is set
        if build_record_id is None:
            raise ValueError("Missing the required parameter `build_record_id` when calling `get`")

        all_params = ['build_record_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/build-record-push/{buildRecordPushResultId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'build_record_id' in params:
            path_params['buildRecordId'] = params['build_record_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='BuildRecordPushResultRest',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def push(self, **kwargs):
        """
        Push build record results to Brew.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.push(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BuildRecordPushRequestRest body: 
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method push" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/build-record-push'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='dict(str, object)',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def push_1(self, build_record_id, **kwargs):
        """
        Build record push results.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.push_1(build_record_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int build_record_id: Build Record id (required)
        :param BuildRecordPushResultRest body: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'build_record_id' is set
        if build_record_id is None:
            raise ValueError("Missing the required parameter `build_record_id` when calling `push_1`")

        all_params = ['build_record_id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method push_1" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/build-record-push/{buildRecordId}/complete'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'build_record_id' in params:
            path_params['buildRecordId'] = params['build_record_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='int',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def push_record_set(self, **kwargs):
        """
        Push build config set record to Brew.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.push_record_set(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BuildConfigSetRecordPushRequestRest body: 
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method push_record_set" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/build-record-push/record-set'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='dict(str, object)',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def status(self, build_record_id, **kwargs):
        """
        Latest push result of BuildRecord.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.status(build_record_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int build_record_id: Build Record id (required)
        :return: BuildRecordPushResultRest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'build_record_id' is set
        if build_record_id is None:
            raise ValueError("Missing the required parameter `build_record_id` when calling `status`")

        all_params = ['build_record_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method status" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/build-record-push/status/{buildRecordId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'build_record_id' in params:
            path_params['buildRecordId'] = params['build_record_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='BuildRecordPushResultRest',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
