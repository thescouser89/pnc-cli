# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from datetime import datetime
from pprint import pformat
from six import iteritems
import re


class Build(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'status': 'str',
        'build_content_id': 'str',
        'temporary_build': 'bool',
        'project': 'ProjectRef',
        'repository': 'RepositoryConfiguration',
        'build_environment_id': 'BuildEnvironment',
        'attributes': 'dict(str, str)',
        'user': 'User',
        'build_configuration_audited': 'BuildConfigurationRevisionRef',
        'dependent_build_ids': 'list[int]',
        'dependency_build_ids': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'build_content_id': 'buildContentId',
        'temporary_build': 'temporaryBuild',
        'project': 'project',
        'repository': 'repository',
        'build_environment_id': 'buildEnvironmentId',
        'attributes': 'attributes',
        'user': 'user',
        'build_configuration_audited': 'buildConfigurationAudited',
        'dependent_build_ids': 'dependentBuildIds',
        'dependency_build_ids': 'dependencyBuildIds'
    }

    def __init__(self, id=None, status=None, build_content_id=None, temporary_build=False, project=None, repository=None, build_environment_id=None, attributes=None, user=None, build_configuration_audited=None, dependent_build_ids=None, dependency_build_ids=None):
        """
        Build - a model defined in Swagger
        """

        self._id = None
        self._status = None
        self._build_content_id = None
        self._temporary_build = None
        self._project = None
        self._repository = None
        self._build_environment_id = None
        self._attributes = None
        self._user = None
        self._build_configuration_audited = None
        self._dependent_build_ids = None
        self._dependency_build_ids = None

        if id is not None:
          self.id = id
        if status is not None:
          self.status = status
        if build_content_id is not None:
          self.build_content_id = build_content_id
        if temporary_build is not None:
          self.temporary_build = temporary_build
        if project is not None:
          self.project = project
        if repository is not None:
          self.repository = repository
        if build_environment_id is not None:
          self.build_environment_id = build_environment_id
        if attributes is not None:
          self.attributes = attributes
        if user is not None:
          self.user = user
        if build_configuration_audited is not None:
          self.build_configuration_audited = build_configuration_audited
        if dependent_build_ids is not None:
          self.dependent_build_ids = dependent_build_ids
        if dependency_build_ids is not None:
          self.dependency_build_ids = dependency_build_ids

    @property
    def id(self):
        """
        Gets the id of this Build.

        :return: The id of this Build.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Build.

        :param id: The id of this Build.
        :type: int
        """

        self._id = id

    @property
    def status(self):
        """
        Gets the status of this Build.

        :return: The status of this Build.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Build.

        :param status: The status of this Build.
        :type: str
        """
        allowed_values = ["NEW", "ENQUEUED", "WAITING_FOR_DEPENDENCIES", "BUILDING", "BUILD_COMPLETED", "DONE", "REJECTED", "REJECTED_FAILED_DEPENDENCIES", "REJECTED_ALREADY_BUILT", "SYSTEM_ERROR", "DONE_WITH_ERRORS", "CANCELLED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def build_content_id(self):
        """
        Gets the build_content_id of this Build.

        :return: The build_content_id of this Build.
        :rtype: str
        """
        return self._build_content_id

    @build_content_id.setter
    def build_content_id(self, build_content_id):
        """
        Sets the build_content_id of this Build.

        :param build_content_id: The build_content_id of this Build.
        :type: str
        """

        self._build_content_id = build_content_id

    @property
    def temporary_build(self):
        """
        Gets the temporary_build of this Build.

        :return: The temporary_build of this Build.
        :rtype: bool
        """
        return self._temporary_build

    @temporary_build.setter
    def temporary_build(self, temporary_build):
        """
        Sets the temporary_build of this Build.

        :param temporary_build: The temporary_build of this Build.
        :type: bool
        """

        self._temporary_build = temporary_build

    @property
    def project(self):
        """
        Gets the project of this Build.

        :return: The project of this Build.
        :rtype: ProjectRef
        """
        return self._project

    @project.setter
    def project(self, project):
        """
        Sets the project of this Build.

        :param project: The project of this Build.
        :type: ProjectRef
        """

        self._project = project

    @property
    def repository(self):
        """
        Gets the repository of this Build.

        :return: The repository of this Build.
        :rtype: RepositoryConfiguration
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """
        Sets the repository of this Build.

        :param repository: The repository of this Build.
        :type: RepositoryConfiguration
        """

        self._repository = repository

    @property
    def build_environment_id(self):
        """
        Gets the build_environment_id of this Build.

        :return: The build_environment_id of this Build.
        :rtype: BuildEnvironment
        """
        return self._build_environment_id

    @build_environment_id.setter
    def build_environment_id(self, build_environment_id):
        """
        Sets the build_environment_id of this Build.

        :param build_environment_id: The build_environment_id of this Build.
        :type: BuildEnvironment
        """

        self._build_environment_id = build_environment_id

    @property
    def attributes(self):
        """
        Gets the attributes of this Build.

        :return: The attributes of this Build.
        :rtype: dict(str, str)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Sets the attributes of this Build.

        :param attributes: The attributes of this Build.
        :type: dict(str, str)
        """

        self._attributes = attributes

    @property
    def user(self):
        """
        Gets the user of this Build.

        :return: The user of this Build.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this Build.

        :param user: The user of this Build.
        :type: User
        """

        self._user = user

    @property
    def build_configuration_audited(self):
        """
        Gets the build_configuration_audited of this Build.

        :return: The build_configuration_audited of this Build.
        :rtype: BuildConfigurationRevisionRef
        """
        return self._build_configuration_audited

    @build_configuration_audited.setter
    def build_configuration_audited(self, build_configuration_audited):
        """
        Sets the build_configuration_audited of this Build.

        :param build_configuration_audited: The build_configuration_audited of this Build.
        :type: BuildConfigurationRevisionRef
        """

        self._build_configuration_audited = build_configuration_audited

    @property
    def dependent_build_ids(self):
        """
        Gets the dependent_build_ids of this Build.

        :return: The dependent_build_ids of this Build.
        :rtype: list[int]
        """
        return self._dependent_build_ids

    @dependent_build_ids.setter
    def dependent_build_ids(self, dependent_build_ids):
        """
        Sets the dependent_build_ids of this Build.

        :param dependent_build_ids: The dependent_build_ids of this Build.
        :type: list[int]
        """

        self._dependent_build_ids = dependent_build_ids

    @property
    def dependency_build_ids(self):
        """
        Gets the dependency_build_ids of this Build.

        :return: The dependency_build_ids of this Build.
        :rtype: list[int]
        """
        return self._dependency_build_ids

    @dependency_build_ids.setter
    def dependency_build_ids(self, dependency_build_ids):
        """
        Sets the dependency_build_ids of this Build.

        :param dependency_build_ids: The dependency_build_ids of this Build.
        :type: list[int]
        """

        self._dependency_build_ids = dependency_build_ids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif isinstance(value, datetime):
                result[attr] = str(value.date())
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Build):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
