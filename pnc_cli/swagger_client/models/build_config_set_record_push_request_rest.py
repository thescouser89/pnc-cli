# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from pprint import pformat
from six import iteritems


class BuildConfigSetRecordPushRequestRest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        BuildConfigSetRecordPushRequestRest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'tag_prefix': 'str',
            'build_config_set_record_id': 'int'
        }

        self.attribute_map = {
            'tag_prefix': 'tagPrefix',
            'build_config_set_record_id': 'buildConfigSetRecordId'
        }

        self._tag_prefix = None
        self._build_config_set_record_id = None

    @property
    def tag_prefix(self):
        """
        Gets the tag_prefix of this BuildConfigSetRecordPushRequestRest.


        :return: The tag_prefix of this BuildConfigSetRecordPushRequestRest.
        :rtype: str
        """
        return self._tag_prefix

    @tag_prefix.setter
    def tag_prefix(self, tag_prefix):
        """
        Sets the tag_prefix of this BuildConfigSetRecordPushRequestRest.


        :param tag_prefix: The tag_prefix of this BuildConfigSetRecordPushRequestRest.
        :type: str
        """
        self._tag_prefix = tag_prefix

    @property
    def build_config_set_record_id(self):
        """
        Gets the build_config_set_record_id of this BuildConfigSetRecordPushRequestRest.


        :return: The build_config_set_record_id of this BuildConfigSetRecordPushRequestRest.
        :rtype: int
        """
        return self._build_config_set_record_id

    @build_config_set_record_id.setter
    def build_config_set_record_id(self, build_config_set_record_id):
        """
        Sets the build_config_set_record_id of this BuildConfigSetRecordPushRequestRest.


        :param build_config_set_record_id: The build_config_set_record_id of this BuildConfigSetRecordPushRequestRest.
        :type: int
        """
        self._build_config_set_record_id = build_config_set_record_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
	    elif isinstance(value, datetime):
		result[attr] = str(value.date())
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
