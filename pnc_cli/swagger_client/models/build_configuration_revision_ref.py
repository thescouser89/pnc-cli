# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from datetime import datetime
from pprint import pformat
from six import iteritems
import re


class BuildConfigurationRevisionRef(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'rev': 'int',
        'name': 'str',
        'description': 'str',
        'build_script': 'str',
        'scm_revision': 'str'
    }

    attribute_map = {
        'id': 'id',
        'rev': 'rev',
        'name': 'name',
        'description': 'description',
        'build_script': 'buildScript',
        'scm_revision': 'scmRevision'
    }

    def __init__(self, id=None, rev=None, name=None, description=None, build_script=None, scm_revision=None):
        """
        BuildConfigurationRevisionRef - a model defined in Swagger
        """

        self._id = None
        self._rev = None
        self._name = None
        self._description = None
        self._build_script = None
        self._scm_revision = None

        if id is not None:
          self.id = id
        if rev is not None:
          self.rev = rev
        if name is not None:
          self.name = name
        if description is not None:
          self.description = description
        if build_script is not None:
          self.build_script = build_script
        if scm_revision is not None:
          self.scm_revision = scm_revision

    @property
    def id(self):
        """
        Gets the id of this BuildConfigurationRevisionRef.

        :return: The id of this BuildConfigurationRevisionRef.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BuildConfigurationRevisionRef.

        :param id: The id of this BuildConfigurationRevisionRef.
        :type: int
        """

        self._id = id

    @property
    def rev(self):
        """
        Gets the rev of this BuildConfigurationRevisionRef.

        :return: The rev of this BuildConfigurationRevisionRef.
        :rtype: int
        """
        return self._rev

    @rev.setter
    def rev(self, rev):
        """
        Sets the rev of this BuildConfigurationRevisionRef.

        :param rev: The rev of this BuildConfigurationRevisionRef.
        :type: int
        """

        self._rev = rev

    @property
    def name(self):
        """
        Gets the name of this BuildConfigurationRevisionRef.

        :return: The name of this BuildConfigurationRevisionRef.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this BuildConfigurationRevisionRef.

        :param name: The name of this BuildConfigurationRevisionRef.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this BuildConfigurationRevisionRef.

        :return: The description of this BuildConfigurationRevisionRef.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this BuildConfigurationRevisionRef.

        :param description: The description of this BuildConfigurationRevisionRef.
        :type: str
        """

        self._description = description

    @property
    def build_script(self):
        """
        Gets the build_script of this BuildConfigurationRevisionRef.

        :return: The build_script of this BuildConfigurationRevisionRef.
        :rtype: str
        """
        return self._build_script

    @build_script.setter
    def build_script(self, build_script):
        """
        Sets the build_script of this BuildConfigurationRevisionRef.

        :param build_script: The build_script of this BuildConfigurationRevisionRef.
        :type: str
        """

        self._build_script = build_script

    @property
    def scm_revision(self):
        """
        Gets the scm_revision of this BuildConfigurationRevisionRef.

        :return: The scm_revision of this BuildConfigurationRevisionRef.
        :rtype: str
        """
        return self._scm_revision

    @scm_revision.setter
    def scm_revision(self, scm_revision):
        """
        Sets the scm_revision of this BuildConfigurationRevisionRef.

        :param scm_revision: The scm_revision of this BuildConfigurationRevisionRef.
        :type: str
        """

        self._scm_revision = scm_revision

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif isinstance(value, datetime):
                result[attr] = str(value.date())
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BuildConfigurationRevisionRef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
