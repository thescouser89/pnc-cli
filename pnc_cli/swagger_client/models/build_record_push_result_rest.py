# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from pprint import pformat
from six import iteritems


class BuildRecordPushResultRest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        BuildRecordPushResultRest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'build_record_id': 'int',
            'status': 'str',
            'log': 'str',
            'artifact_import_errors': 'list[ArtifactImportError]',
            'brew_build_id': 'int',
            'brew_build_url': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'build_record_id': 'buildRecordId',
            'status': 'status',
            'log': 'log',
            'artifact_import_errors': 'artifactImportErrors',
            'brew_build_id': 'brewBuildId',
            'brew_build_url': 'brewBuildUrl'
        }

        self._id = None
        self._build_record_id = None
        self._status = None
        self._log = None
        self._artifact_import_errors = None
        self._brew_build_id = None
        self._brew_build_url = None

    @property
    def id(self):
        """
        Gets the id of this BuildRecordPushResultRest.


        :return: The id of this BuildRecordPushResultRest.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BuildRecordPushResultRest.


        :param id: The id of this BuildRecordPushResultRest.
        :type: int
        """
        self._id = id

    @property
    def build_record_id(self):
        """
        Gets the build_record_id of this BuildRecordPushResultRest.


        :return: The build_record_id of this BuildRecordPushResultRest.
        :rtype: int
        """
        return self._build_record_id

    @build_record_id.setter
    def build_record_id(self, build_record_id):
        """
        Sets the build_record_id of this BuildRecordPushResultRest.


        :param build_record_id: The build_record_id of this BuildRecordPushResultRest.
        :type: int
        """
        self._build_record_id = build_record_id

    @property
    def status(self):
        """
        Gets the status of this BuildRecordPushResultRest.


        :return: The status of this BuildRecordPushResultRest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this BuildRecordPushResultRest.


        :param status: The status of this BuildRecordPushResultRest.
        :type: str
        """
        allowed_values = ["SUCCESS", "FAILED", "SYSTEM_ERROR", "CANCELED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status

    @property
    def log(self):
        """
        Gets the log of this BuildRecordPushResultRest.


        :return: The log of this BuildRecordPushResultRest.
        :rtype: str
        """
        return self._log

    @log.setter
    def log(self, log):
        """
        Sets the log of this BuildRecordPushResultRest.


        :param log: The log of this BuildRecordPushResultRest.
        :type: str
        """
        self._log = log

    @property
    def artifact_import_errors(self):
        """
        Gets the artifact_import_errors of this BuildRecordPushResultRest.


        :return: The artifact_import_errors of this BuildRecordPushResultRest.
        :rtype: list[ArtifactImportError]
        """
        return self._artifact_import_errors

    @artifact_import_errors.setter
    def artifact_import_errors(self, artifact_import_errors):
        """
        Sets the artifact_import_errors of this BuildRecordPushResultRest.


        :param artifact_import_errors: The artifact_import_errors of this BuildRecordPushResultRest.
        :type: list[ArtifactImportError]
        """
        self._artifact_import_errors = artifact_import_errors

    @property
    def brew_build_id(self):
        """
        Gets the brew_build_id of this BuildRecordPushResultRest.


        :return: The brew_build_id of this BuildRecordPushResultRest.
        :rtype: int
        """
        return self._brew_build_id

    @brew_build_id.setter
    def brew_build_id(self, brew_build_id):
        """
        Sets the brew_build_id of this BuildRecordPushResultRest.


        :param brew_build_id: The brew_build_id of this BuildRecordPushResultRest.
        :type: int
        """
        self._brew_build_id = brew_build_id

    @property
    def brew_build_url(self):
        """
        Gets the brew_build_url of this BuildRecordPushResultRest.


        :return: The brew_build_url of this BuildRecordPushResultRest.
        :rtype: str
        """
        return self._brew_build_url

    @brew_build_url.setter
    def brew_build_url(self, brew_build_url):
        """
        Sets the brew_build_url of this BuildRecordPushResultRest.


        :param brew_build_url: The brew_build_url of this BuildRecordPushResultRest.
        :type: str
        """
        self._brew_build_url = brew_build_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
	    elif isinstance(value, datetime):
		result[attr] = str(value.date())
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
