# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from datetime import datetime
from pprint import pformat
from six import iteritems
import re


class RunningBuildsCountRest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'running': 'int',
        'enqueued': 'int',
        'waiting_for_dependencies': 'int'
    }

    attribute_map = {
        'running': 'running',
        'enqueued': 'enqueued',
        'waiting_for_dependencies': 'waitingForDependencies'
    }

    def __init__(self, running=None, enqueued=None, waiting_for_dependencies=None):
        """
        RunningBuildsCountRest - a model defined in Swagger
        """

        self._running = None
        self._enqueued = None
        self._waiting_for_dependencies = None

        if running is not None:
          self.running = running
        if enqueued is not None:
          self.enqueued = enqueued
        if waiting_for_dependencies is not None:
          self.waiting_for_dependencies = waiting_for_dependencies

    @property
    def running(self):
        """
        Gets the running of this RunningBuildsCountRest.

        :return: The running of this RunningBuildsCountRest.
        :rtype: int
        """
        return self._running

    @running.setter
    def running(self, running):
        """
        Sets the running of this RunningBuildsCountRest.

        :param running: The running of this RunningBuildsCountRest.
        :type: int
        """

        self._running = running

    @property
    def enqueued(self):
        """
        Gets the enqueued of this RunningBuildsCountRest.

        :return: The enqueued of this RunningBuildsCountRest.
        :rtype: int
        """
        return self._enqueued

    @enqueued.setter
    def enqueued(self, enqueued):
        """
        Sets the enqueued of this RunningBuildsCountRest.

        :param enqueued: The enqueued of this RunningBuildsCountRest.
        :type: int
        """

        self._enqueued = enqueued

    @property
    def waiting_for_dependencies(self):
        """
        Gets the waiting_for_dependencies of this RunningBuildsCountRest.

        :return: The waiting_for_dependencies of this RunningBuildsCountRest.
        :rtype: int
        """
        return self._waiting_for_dependencies

    @waiting_for_dependencies.setter
    def waiting_for_dependencies(self, waiting_for_dependencies):
        """
        Sets the waiting_for_dependencies of this RunningBuildsCountRest.

        :param waiting_for_dependencies: The waiting_for_dependencies of this RunningBuildsCountRest.
        :type: int
        """

        self._waiting_for_dependencies = waiting_for_dependencies

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif isinstance(value, datetime):
                result[attr] = str(value.date())
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RunningBuildsCountRest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
