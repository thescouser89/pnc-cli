# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from pprint import pformat
from six import iteritems


class TargetRepositoryRest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TargetRepositoryRest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'identifier': 'str',
            'repository_type': 'str',
            'repository_path': 'str',
            'artifact_ids': 'list[int]'
        }

        self.attribute_map = {
            'id': 'id',
            'identifier': 'identifier',
            'repository_type': 'repositoryType',
            'repository_path': 'repositoryPath',
            'artifact_ids': 'artifactIds'
        }

        self._id = None
        self._identifier = None
        self._repository_type = None
        self._repository_path = None
        self._artifact_ids = None

    @property
    def id(self):
        """
        Gets the id of this TargetRepositoryRest.


        :return: The id of this TargetRepositoryRest.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TargetRepositoryRest.


        :param id: The id of this TargetRepositoryRest.
        :type: int
        """
        self._id = id

    @property
    def identifier(self):
        """
        Gets the identifier of this TargetRepositoryRest.


        :return: The identifier of this TargetRepositoryRest.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this TargetRepositoryRest.


        :param identifier: The identifier of this TargetRepositoryRest.
        :type: str
        """
        self._identifier = identifier

    @property
    def repository_type(self):
        """
        Gets the repository_type of this TargetRepositoryRest.


        :return: The repository_type of this TargetRepositoryRest.
        :rtype: str
        """
        return self._repository_type

    @repository_type.setter
    def repository_type(self, repository_type):
        """
        Sets the repository_type of this TargetRepositoryRest.


        :param repository_type: The repository_type of this TargetRepositoryRest.
        :type: str
        """
        allowed_values = ["MAVEN", "MAVEN_TEMPORARY", "NPM", "COCOA_POD", "GENERIC_PROXY"]
        if repository_type not in allowed_values:
            raise ValueError(
                "Invalid value for `repository_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._repository_type = repository_type

    @property
    def repository_path(self):
        """
        Gets the repository_path of this TargetRepositoryRest.


        :return: The repository_path of this TargetRepositoryRest.
        :rtype: str
        """
        return self._repository_path

    @repository_path.setter
    def repository_path(self, repository_path):
        """
        Sets the repository_path of this TargetRepositoryRest.


        :param repository_path: The repository_path of this TargetRepositoryRest.
        :type: str
        """
        self._repository_path = repository_path

    @property
    def artifact_ids(self):
        """
        Gets the artifact_ids of this TargetRepositoryRest.


        :return: The artifact_ids of this TargetRepositoryRest.
        :rtype: list[int]
        """
        return self._artifact_ids

    @artifact_ids.setter
    def artifact_ids(self, artifact_ids):
        """
        Sets the artifact_ids of this TargetRepositoryRest.


        :param artifact_ids: The artifact_ids of this TargetRepositoryRest.
        :type: list[int]
        """
        self._artifact_ids = artifact_ids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
	    elif isinstance(value, datetime):
		result[attr] = str(value.date())
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
